name: Release & Publish

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write
  packages: write
  id-token: write  # Required for NPM provenance

jobs:
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run all quality checks
        run: |
          npm run lint:all
          npm run format:check
          npm run test:coverage
          npm audit --audit-level=moderate
          npm run security:check-versions

      - name: Build
        run: npm run build

      - name: Verify package can be packed
        run: npm pack --dry-run

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: npm-production
      url: https://www.npmjs.com/package/@josepderiu/npm-minimum-age-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Verify package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "‚ùå Error: package.json version ($PACKAGE_VERSION) does not match tag (${{ steps.version.outputs.version }})"
            exit 1
          fi
          echo "‚úÖ Version check passed: $PACKAGE_VERSION"

      - name: Publish to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create package artifact
        run: npm pack

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: '*.tgz'
          retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-npm
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version info
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Extract changelog section for this version
          CHANGELOG=$(awk -v ver="$VERSION" '
            /^## \[/ {
              if (found) exit;
              if ($0 ~ "\\["ver"\\]") found=1;
              next;
            }
            found { print }
          ' CHANGELOG.md)
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release version $VERSION"
          fi
          
          # Save to file to preserve formatting
          echo "$CHANGELOG" > release-notes.md
          echo "Release notes extracted for version $VERSION"

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.version.outputs.tag }}
          body_path: release-notes.md
          files: '*.tgz'
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Post-release Notification
    runs-on: ubuntu-latest
    needs: [publish-npm, create-github-release]
    if: always()
    
    steps:
      - name: Check release status
        run: |
          if [[ "${{ needs.publish-npm.result }}" == "success" ]] && \
             [[ "${{ needs.create-github-release.result }}" == "success" ]]; then
            echo "‚úÖ Release completed successfully!"
            echo "üì¶ Package: @josepderiu/npm-minimum-age-validation"
            echo "üîñ Tag: ${GITHUB_REF#refs/tags/}"
          else
            echo "‚ùå Release failed. Check logs above."
            exit 1
          fi
